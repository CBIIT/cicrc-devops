pipeline {
	agent {
		node {
			label 'slave-ncias-d2999-c'
		}
	}

	parameters {

        string(
            defaultValue: '',
            description: 'The Image to Deploy',
            name: 'Image_Tag')

        extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to deploy to',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa')

  }

  stages{
  	stage('checkout'){

  		steps {

  		checkout([$class: 'GitSCM',
			branches: [[name: '*/main']],
			doGenerateSubmoduleConfigurations: false,
			extensions: [[$class: 'RelativeTargetDirectory',
			relativeTargetDir: 'cicrc-devops']],
			submoduleCfg: [],
			userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/cicrc-devops.git']]])

        }

  	}

  	stage('Update Task Definition'){

	    environment {

			IMAGE_TAG   = "${params.Image_Tag}"
			ENVIRONMENT = "${params.Environment}
			REGION      = "us-east-1"
			ECR_REPO    = "cicrc-web"

        }

 		steps {

 			script {

			    sh label: 'Task-Defiinition-Update', script: '''#!/bin/bash

				# create new revision for CICRC Task Definition
				echo "Updating Task Defintion to Use: $ECR_REPO:$IMAGE_TAG"
				ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
				IMAGE_ID="$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG"

				sed -i "s|{{account_id}}|$ACCOUNT_ID|" cicrc-devops/web_task.json
				sed -i "s|{{image_id}}|$IMAGE_ID|" cicrc-devops/web_task.json
				sed -i "s|{{environment}}|$ENVIRONMENT|" cicrc-devops/web_task.json

				aws ecs register-task-definition --cli-input-json file://cicrc-devops/web_task.json

				'''

			}

 		}

  	}

    stage('Update Service'){

	    environment {

			IMAGE_TAG    = "${params.Image_Tag}"
			REGION       = "us-east-1"
			CLUSTER      = "cicrc-${params.Environment}-ecs"
			SERVICE_NAME = "cicrc-${params.Environment}-web"

        }

 		steps {

 			script {

			    sh label: 'Service-Update', script: '''#!/bin/bash

				# Redeploy Service Using The Latest Task Definition
				echo "Updating Service: $SERVICE_NAME"

				TASK_REVISION=$(aws ecs describe-task-definition --task-definition $SERVICE_NAME | egrep "revision" | awk '{print $2}' | sed 's/,//')
				aws ecs update-service --cluster $CLUSTER --region $REGION --service $SERVICE_NAME --task-definition $SERVICE_NAME:$TASK_REVISION --desired-count 1

				'''

			}

 		}

  	}

  }

  post {

    cleanup {

        cleanWs()

    }

  }

}