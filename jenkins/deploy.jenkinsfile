pipeline {
	agent {
		node {
			label 'slave-ncias-d2999-c'
		}
	}

	parameters {

        string(
            defaultValue: '',
            description: 'The Image to Deploy',
            name: 'Image_Tag')

        extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to deploy to',
            type: 'PT_SINGLE_SELECT',
            value: 'qa,dev')

  }

  options {

	timestamps()

  }

  environment {

	ENV      = "${params.Environment}"
	REGION   = "us-east-1"
	JOB_PATH = '_default/_lower/CICRC'
	PROJECT  = "crcr"
	APP      = "backend"

  }

  stages{
    stage('trigger additional jobs'){

  		steps {

            script {
			    if (params.Update_Filesystem) {
				    echo 'Run the EFS synchronization job'
				    build job: "$JOB_PATH/CICRC-Filesystem-Sync"
			    }
		    }

			script {
			    if (params.Restore_DB) {
				    echo 'Run the database update job'
				    build job: "$JOB_PATH/CICRC-DB-Backup-Restore", parameters: [string(name: 'Backup_File', value: "cicrc-${params.Image_Tag}.sql"), booleanParam(name: 'Backup_Database', value: true), extendedChoice(name: 'Backup_Tier', value: "${params.Restore_DB_From}"), booleanParam(name: 'Restore_Database', value: true), extendedChoice(name: 'Restore_Tier', value: "${params.Restore_DB_To}")]
			    }
		    }

        }

  	}

  	stage('checkout'){

  		steps {

  		checkout([$class: 'GitSCM',
			branches: [[name: '*/crcr-728']],
			doGenerateSubmoduleConfigurations: false,
			extensions: [[$class: 'RelativeTargetDirectory',
			relativeTargetDir: 'cicrc-devops']],
			submoduleCfg: [],
			userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/cicrc-devops.git']]])

        }

  	}

  	stage('Set Environment Variables'){
 		steps {
 			script {
			    
				env.SPLUNK_HOST = sh(label: 'Get splunk host', returnStdout: true, script: "aws secretsmanager get-secret-value --region $REGION --secret-id cicrc/db/$ENV --query SecretString --output text | jq -r '.SPLUNK_HOST'").trim()
				
                env.SPLUNK_PORT = sh(label: 'Get splunk port', returnStdout: true, script: "aws secretsmanager get-secret-value --region $REGION --secret-id cicrc/db/$ENV --query SecretString --output text | jq -r '.SPLUNK_PORT'").trim()
                env.SPLUNK_TOKEN = sh(label: 'Get splunk token', returnStdout: true, script: "aws secretsmanager get-secret-value --region $REGION --secret-id cicrc/db/$ENV --query SecretString --output text | jq -r '.SPLUNK_TOKEN'").trim()

			}
 		}
  	}

  	stage('Update Task Definition'){

	    environment {

			IMG_TAG  = "${params.Image_Tag}"
			ENV      = "${params.Environment}"
			ECR_REPO = "cicrc-web"
			// set ECR account number
			ECR_ACCOUNT = "002558681621"

			// set repo URL
			REPO_URL = "${ECR_ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com/${ECR_REPO}"

        }

 		steps {

 			script {

			    sh label: 'Task-Definition-Update', script: '''#!/bin/bash

				# create new revision for CICRC Task Definition
				echo "Updating Task Defintion to Use: $ECR_REPO:$IMG_TAG, env: $ENV"
				ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
				IMAGE_ID="$REPO_URL:$IMG_TAG"
				EFS_ID=$(aws efs describe-file-systems  --query "FileSystems[?Name=='cicrc-$ENV-efs'].FileSystemId"  --output text)

				sed -i "s|{{account_id}}|$ACCOUNT_ID|" cicrc-devops/aws/web_task.json
				sed -i "s|{{image_id}}|$IMAGE_ID|" cicrc-devops/aws/web_task.json
				sed -i "s|{{environment}}|$ENV|" cicrc-devops/aws/web_task.json
				sed -i "s|{{efs_id}}|$EFS_ID|" cicrc-devops/aws/web_task.json
                sed -i "s|{{splunk_host}}|$SPLUNK_HOST|" cicrc-devops/aws/web_task.json
                sed -i "s|{{splunk_port}}|$SPLUNK_PORT|" cicrc-devops/aws/web_task.json
                sed -i "s|{{splunk_token}}|$SPLUNK_TOKEN|" cicrc-devops/aws/web_task.json

				aws ecs register-task-definition --region $REGION --cli-input-json file://cicrc-devops/aws/web_task.json

				'''

			}

 		}

  	}

    stage('Update Service'){

	    environment {

			CLUSTER      = "cicrc-${params.Environment}-ecs"
			SERVICE_NAME = "cicrc-${params.Environment}-web"

        }

 		steps {

 			script {

			    sh label: 'Service-Update', script: '''#!/bin/bash

				# Redeploy Service Using The Latest Task Definition
				echo "Updating Service: $SERVICE_NAME"

				TASK_REVISION=$(aws ecs describe-task-definition --task-definition $SERVICE_NAME | egrep "revision" | awk '{print $2}' | sed 's/,//')
				aws ecs update-service --cluster $CLUSTER --region $REGION --service $SERVICE_NAME --task-definition $SERVICE_NAME:$TASK_REVISION --desired-count 1

				'''

			}

 		}

  	}

	stage('verify deployment'){

		environment {

			REGION  = "us-east-1"
			CLUSTER = "cicrc-${params.Environment}-ecs"
			SERVICE = "cicrc-${params.Environment}-web"

        }

		steps {

 			script {

			    sh label: 'Verify-Deploy', script: '''#!/bin/bash

                # wait untiil the service is stable
				aws ecs wait services-stable --cluster $CLUSTER --region $REGION --service $SERVICE

				'''

			}

 		}

  	}

  }

  post {

    cleanup {

        cleanWs()

    }

  }

}
