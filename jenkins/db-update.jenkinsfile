pipeline {
	agent {
		node {
			label 'slave-ncias-d2999-c'
		}
	}

	parameters {

        string(
            defaultValue: '',
            description: 'The file name of the MySQL backup file',
            name: 'Backup_File')

        string(
            defaultValue: '',
            description: 'The S3 bucket to store the backup file',
            name: 'S3_Bucket')

        booleanParam(
            defaultValue: true,
			description: 'Perform DB backup task',
            name: 'Backup_Database')

        extendedChoice(
            name: 'Backup_Tier',
            defaultValue: 'dev',
            description: 'Choose the environment to back up',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa')

        booleanParam(
            defaultValue: true,
			description: 'Perform DB restore task',
            name: 'Restore_Database')

        extendedChoice(
            name: 'Restore_Tier',
            defaultValue: 'dev',
            description: 'Choose the environment to restore to',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa')

  }

  options {

	timestamps()

  }

  stages{

    stage('set variables'){

		environment {

	        BACKUP_TIER  = "${params.Backup_Tier}"
            RESTORE_TIER  = "${params.Restore_Tier}"

        }

        steps {

  		    script {

			    if (params.Backup_Database) {

                    env.BAK_DB_HOST = sh(label: 'Get DB Host', returnStdout: true, script: "aws secretsmanager get-secret-value --secret-id cicrc/db/$BACKUP_TIER --query SecretString --output text | jq -r '.DB_HOST'")
                    env.BAK_DB_NAME = sh(label: 'Get DB Name', returnStdout: true, script: "aws secretsmanager get-secret-value --secret-id cicrc/db/$BACKUP_TIER --query SecretString --output text | jq -r '.DB_NAME'")
                    env.BAK_DB_USER = sh(label: 'Get DB User', returnStdout: true, script: "aws secretsmanager get-secret-value --secret-id cicrc/db/$BACKUP_TIER --query SecretString --output text | jq -r '.DB_USER'")
                    env.BAK_DB_PASS = sh(label: 'Get DB Passsword', returnStdout: true, script: "aws secretsmanager get-secret-value --secret-id cicrc/db/$BACKUP_TIER --query SecretString --output text | jq -r '.DB_PASS'")

                }

                if (params.Restore_Database) {

                    env.RES_DB_HOST = sh(label: 'Get DB Host', returnStdout: true, script: "aws secretsmanager get-secret-value --secret-id cicrc/db/$RESTORE_TIER --query SecretString --output text | jq -r '.DB_HOST'")
                    env.RES_DB_NAME = sh(label: 'Get DB Name', returnStdout: true, script: "aws secretsmanager get-secret-value --secret-id cicrc/db/$RESTORE_TIER --query SecretString --output text | jq -r '.DB_NAME'")
                    env.RES_DB_USER = sh(label: 'Get DB User', returnStdout: true, script: "aws secretsmanager get-secret-value --secret-id cicrc/db/$RESTORE_TIER --query SecretString --output text | jq -r '.DB_USER'")
                    env.RES_DB_PASS = sh(label: 'Get DB Passsword', returnStdout: true, script: "aws secretsmanager get-secret-value --secret-id cicrc/db/$RESTORE_TIER --query SecretString --output text | jq -r '.DB_PASS'")

                }
				
                if (params.Backup_File == 'cicrc-daily-backup') {

                    env.Backup_File_DATE = sh(label: 'Set Backup file name', returnStdout: true, script: "echo cicrc_$(date +%m%d%Y).sql").trim()

                }

			}

        }

  	}

  	stage('backup db'){

	    when {
            expression {
                return params.Backup_Database;
            }
        }

		agent {
            docker {
                image 'mysql:8.0'
                reuseNode true
            }
        }

 		environment {

	        BACKUP_FILE  = "${params.Backup_File}"
	        BACKUP_TIER  = "${params.Backup_Tier}"

        }

		steps {

 			script {

                sh label: 'Backup-DB', script: """#!/bin/bash

				echo "Backing up DB:    $BACKUP_FILE - user:   $BAK_DB_USER"
                echo "FILENAME WITH DATE:   $Backup_File_DATE"

                mkdir $WORKSPACE/mysqldump
                echo "[client]" > $WORKSPACE/sql.conf
                echo "host=$BAK_DB_HOST" >> $WORKSPACE/sql.conf
                echo "user=$BAK_DB_USER" >> $WORKSPACE/sql.conf
                echo "password=$BAK_DB_PASS" >> $WORKSPACE/sql.conf

                mysqldump --defaults-file=$WORKSPACE/sql.conf --no-tablespaces --single-transaction --add-drop-database --set-gtid-purged=OFF --result-file $WORKSPACE/mysqldump/$BACKUP_FILE $BAK_DB_NAME

				"""

			}

 		}

  	}

	stage('push backup to S3'){

	    when {
            expression {
                return params.Backup_Database;
            }
        }

 		environment {

	        BACKUP_FILE  = "${params.Backup_File}"
	        S3_BUCKET    = "${params.S3_Bucket}"

        }

		steps {

  		    script {

			    sh label: 'Push-To-S3', script: """#!/bin/bash

                aws s3 cp $WORKSPACE/mysqldump/$BACKUP_FILE s3://$S3_BUCKET

                echo "Backup File:  $BACKUP_FILE   Has been uploaded to:  $S3_BUCKET"

				"""

			}

        }

  	}

	stage('pull backup from S3'){

	    when {
            allOf {
                expression { return params.Restore_Database; }
                expression { fileExists("mysqldump/$params.Backup_File") == false }
            }
        }

 		environment {

	        BACKUP_FILE  = "${params.Backup_File}"
	        S3_BUCKET    = "${params.S3_Bucket}"

        }

		steps {

  		    script {

			    sh label: 'Pull-From-S3', script: """#!/bin/bash

				aws s3 cp s3://$S3_BUCKET/$BACKUP_FILE $WORKSPACE/mysqldump/$BACKUP_FILE

                ls -la $WORKSPACE/mysqldump/
                
                echo "Backup File:  $BACKUP_FILE   Has been copied from:  $S3_BUCKET"

				"""

			}

        }

  	}

  	stage('restore db'){

	    when {
            expression {
                return params.Restore_Database;
            }
        }

		agent {
            docker {
                image 'mysql:8.0'
                reuseNode true
            }
        }
		
 		environment {

	        BACKUP_FILE  = "${params.Backup_File}"
	        RESTORE_TIER = "${params.Restore_Tier}"

        }

 		steps {

 			script {

			    sh label: 'Restore-DB', script: """#!/bin/bash

				echo "Restoring backup to $RESTORE_TIER:    $BACKUP_FILE - user:   $RES_DB_USER"

                echo "[client]" > $WORKSPACE/sql.conf
                echo "host=$RES_DB_HOST" >> $WORKSPACE/sql.conf
                echo "user=$RES_DB_USER" >> $WORKSPACE/sql.conf
                echo "password=$RES_DB_PASS" >> $WORKSPACE/sql.conf

                mysql --defaults-file=$WORKSPACE/sql.conf --default-character-set=utf8 -e "source $WORKSPACE/mysqldump/$BACKUP_FILE" $RES_DB_NAME

				"""

			}

 		}

  	}

  }

  post {

    cleanup {

        cleanWs()

    }

  }

}