pipeline {
	agent {
		node {
			label 'slave-ncias-d2999-c'
		}
	}

	parameters {

        string(
            defaultValue: '',
            description: 'The file name of the MySQL backup file',
            name: 'Backup_File')

        string(
            defaultValue: '',
            description: 'The S3 bucket to store the backup file',
            name: 'S3_Bucket')

        extendedChoice(
            name: 'Backup_Tier',
            defaultValue: 'dev',
            description: 'Choose the environment to back up',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa')

        extendedChoice(
            name: 'Restore_Tier',
            defaultValue: 'dev',
            description: 'Choose the environment to restore to',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa')

        booleanParam(
            defaultValue: true,
			description: 'Perform DB backup task',
            name: 'Backup_Database')

        booleanParam(
            defaultValue: true,
			description: 'Perform DB restore task',
            name: 'Restore_Database')

  }

  options {

	timestamps()

  }

  stages{

  	stage('backup db'){

	    when {
            expression {
                return params.Backup_Database;
            }
        }

		agent {
            docker {
                image 'mysql:8.0'
                //args '--net=host -u root -v /var/run/docker.sock:/var/run/docker.sock'
                reuseNode true
            }
        }

 		environment {

	        BACKUP_FILE  = "${params.Backup_File}"
	        BACKUP_TIER  = "${params.Backup_Tier}"

        }

		steps {

 			script {

			    sh label: 'Backup-DB', script: '''#!/bin/bash

				echo "Backing up DB:    $BACKUP_FILE"

				#mysqldump --version

				'''

			}

 		}

  	}

	stage('push backup to S3'){

	    when {
            expression {
                return params.Backup_Database;
            }
        }

 		environment {

	        BACKUP_FILE  = "${params.Backup_File}"
	        S3_BUCKET    = "${params.S3_Bucket}"

        }

		steps {

  		    script {

			    sh label: 'Push-To-S3', script: '''#!/bin/bash

				which aws

				pwd

				echo $WORKSPACE

				'''

			}

        }

  	}

	stage('pull backup from S3'){

	    when {
            expression {
                return params.Restore_Database;
            }
        }

 		environment {

	        BACKUP_FILE  = "${params.Backup_File}"
	        S3_BUCKET    = "${params.S3_Bucket}"

        }

		steps {

  		    script {

			    sh label: 'Pull-From-S3', script: '''#!/bin/bash

				which aws

				pwd

				echo $WORKSPACE

				'''

			}

        }

  	}

  	stage('restore db'){

	    when {
            expression {
                return params.Restore_Database;
            }
        }

		agent {
            docker {
                image 'mysql:8.0'
                //args '--net=host -u root -v /var/run/docker.sock:/var/run/docker.sock'
                reuseNode true
            }
        }
		
 		environment {

	        BACKUP_FILE  = "${params.Backup_File}"
	        RESTORE_TIER = "${params.Restore_Tier}"

        }

 		steps {

 			script {

			    sh label: 'Restore-DB', script: '''#!/bin/bash

				echo "test:    $ECR_REPO"

				'''

			}

 		}

  	}

  }

  post {

    cleanup {

        cleanWs()

    }

  }

}