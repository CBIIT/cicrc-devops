pipeline {
	agent {
		node {
			label 'slave-ncias-d2999-c'
		}
	}

	parameters {

		gitParameter(branchFilter: 'origin/(.*)',
            defaultValue: 'main',
            name: 'Branch',
            type: 'PT_BRANCH_TAG',
            quickFilterEnabled: true,
            selectedValue: 'DEFAULT',
            sortMode: 'ASCENDING_SMART',
            tagFilter: '*',
            useRepository: 'https://github.com/CBIIT/CRCR.git')

        booleanParam(
            defaultValue: false,
			description: 'Perform deployment to the Dev tier',
            name: 'Deploy_Image')

  }

  options {

	timestamps()

  }

  environment {

	CODE_BRANCH  = "${params.Branch}"
	REGION       = "us-east-1"
	PROGRAM      = "doerc"
    PROJECT      = "crcr"
	APP          = "backend"
	ECR_REPO     = "ccdi-${env.PROJECT}-${env.APP}"

  }

  stages{
  	stage('checkout'){

  		steps {

  		checkout([$class: 'GitSCM',
			branches: [[name: '*/crcr-768']],
			extensions: [[$class: 'SubmoduleOption', 
			recursiveSubmodules: true],
			[$class: 'RelativeTargetDirectory',
			relativeTargetDir: 'cicrc-devops']],
			userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/cicrc-devops.git']]])

		checkout([$class: 'GitSCM',
            branches: [[name: "${params.Branch}"]], 
            extensions: [[$class: 'SubmoduleOption', 
			recursiveSubmodules: true],
			[$class: 'RelativeTargetDirectory',
			relativeTargetDir: 'cicrc-devops/docker/CRCR']],
            userRemoteConfigs:
			[[credentialsId: 'sowmya-jenkins-token', url: 'https://github.com/CBIIT/CRCR.git']]])

        }

  	}
  	stage('Set Environment Variables'){

 		steps {

 			script {

                // set ECR account number
				env.ECR_ACCOUNT = "986019062625"

				// set repo URL
				env.REPO_URL = "${ECR_ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com/${ECR_REPO}"

			}

 		}

  	}
  	stage('build'){

 		steps {

 			script {

			    sh label: 'Docker-Build', script: '''#!/bin/bash

				# build CICRC Docker container
				echo "Building: $ECR_REPO:$CODE_BRANCH.$BUILD_NUMBER"

				cd $WORKSPACE/cicrc-devops/docker && DOCKER_BUILDKIT=1 docker build -t $REPO_URL:$CODE_BRANCH.$BUILD_NUMBER .

				'''

			}

 		}

  	}

  	stage('Test'){

        agent {
            docker {
                image 'cbiitssrepo/cicd-ansible_4.0'
                args '--net=host -u root -v /var/run/docker.sock:/var/run/docker.sock'
                reuseNode true
            }
        }

 		steps {

 			script {

			    sh label: 'Trivy-Test', script: '''#!/bin/bash

				# Test image for vulnerabilities
                echo "Testing Image with Trivy: $ECR_REPO:$CODE_BRANCH.$BUILD_NUMBER"
                # aws_account=$(aws sts get-caller-identity --query "Account" --output text)
				# repo_url="$aws_account.dkr.ecr.$REGION.amazonaws.com/$ECR_REPO"

                #trivy image --exit-code 1 --severity HIGH,CRITICAL $repo_url:$CODE_BRANCH.$BUILD_NUMBER
                trivy image --timeout 15m --severity HIGH,CRITICAL $REPO_URL:$CODE_BRANCH.$BUILD_NUMBER

				'''

			}

 		}

  	}

  	stage('push to ECR'){

 		steps {

 			script {

			    sh label: 'Docker-Push', script: '''#!/bin/bash

				# pushing CICRC container to ECR
				echo "Pushing: $ECR_REPO:$CODE_BRANCH.$BUILD_NUMBER"
				
				# login and push to ECR
				docker login -u AWS -p $(aws ecr get-login-password --region $REGION) $REPO_URL
				docker push $REPO_URL:$CODE_BRANCH.$BUILD_NUMBER

				'''

			}

 		}

  	}

  	stage('Update Code Tag'){

 		steps {
 			
			script {

                tagRepo ( 
                    gitTag: "${CODE_BRANCH}.${BUILD_NUMBER}",
                    gitUrl: "github.com/CBIIT/cicrc-devops",
                    checkoutDirectory: "cicrc-devops"
                )

            }

 		}

  	}

  }

  post {


    success {

        // script {
		// 	withCredentials([string(credentialsId: 'cicrc-github-token', variable: 'git_token')]) {
		// 		sh label: 'GIT-Tag Repo', script: '''#!/bin/bash

		// 		cd ${WORKSPACE}/cicrc-devops/docker/CICRC
		// 		gitURL=$(git config remote.origin.url | sed 's|^.*//||')
		// 		echo "Applying tag ${CODE_BRANCH}.${BUILD_NUMBER} to URL:  $gitURL"
		// 		git config user.email "cicrc-jenkins@cancer.gov"
		// 		git config user.name "CICRC Jenkins"
		// 		git tag --no-sign -a ${CODE_BRANCH}.${BUILD_NUMBER} -m "Jenkins tag: ${CODE_BRANCH}.${BUILD_NUMBER}"
		// 		git push https://${git_token}:x-oauth-basic@${gitURL} --tags
				
		// 		'''
			
		// 		}
		// 	}

		script {
			if (params.Deploy_Image) {
				echo "Deploy the image: ${params.Branch}.$BUILD_NUMBER    to the Dev environment"
				build job: '_default/_lower/CICRC/CICRC-Image-Deploy', parameters: [string(name: 'Image_Tag', value: "${params.Branch}.$BUILD_NUMBER"), extendedChoice(name: 'Environment', value: 'dev'), booleanParam(name: 'Update_Filesystem', value: false), booleanParam(name: 'Restore_DB', value: false)]
			}
		}
    }

    cleanup {

        cleanWs()

    }

  }

}